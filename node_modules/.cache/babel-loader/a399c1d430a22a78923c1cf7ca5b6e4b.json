{"ast":null,"code":"var _jsxFileName = \"/home/gb/weather-app/src/App.js\";\nimport React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport Weather from \"./components/weatherapp\";\nimport Form from \"./components/form\"; // api.openweathermap.org/data/2.5/weather?q=London,uk\n\nconst API_KEY = \"db0722dc5ad7c43d8271bb13f965e3fb\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.getWeatherData = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=Bangalore,in&appid=${API_KEY}`);\n      const response = await api_call.json();\n      this.setState({\n        city: response.name,\n        country: response.sys.country,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description\n      });\n      this.get_WeatherIcon(this.weathericon, response.weather[0].id);\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n    this.weathericon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-select\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      clouds: \"wi-day-fog\"\n    };\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({\n          icon: this.weathericon.Thunderstorm\n        });\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: this.weathericon.Drizzle\n        });\n        break;\n\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({\n          icon: this.weathericon.Rain\n        });\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: this.weathericon.Snow\n        });\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: this.weathericon.Atmosphere\n        });\n        break;\n\n      case rangeId === 800:\n        this.setState({\n          icon: this.weathericon.Clear\n        });\n        break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({\n          icon: this.weathericon.clouds\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: this.weathericon.clouds\n        });\n    }\n  }\n\n  componentDidMount() {\n    this.getWeatherData();\n  }\n\n  render() {\n    const {\n      city,\n      country,\n      icon,\n      main,\n      celsius,\n      temp_max,\n      temp_min,\n      description,\n      error\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      loadweather: this.getWeatherData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Weather, {\n      city: city,\n      country: country,\n      main: main,\n      celsius: celsius,\n      temp_max: temp_max,\n      temp_min: temp_min,\n      description: description,\n      weathericon: icon,\n      error: error,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/gb/weather-app/src/App.js"],"names":["React","Weather","Form","API_KEY","App","Component","constructor","props","getWeatherData","e","preventDefault","city","target","elements","value","api_call","fetch","response","json","setState","name","country","sys","celsius","calCelsius","main","temp","temp_max","temp_min","description","weather","get_WeatherIcon","weathericon","id","state","undefined","icon","error","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","clouds","cell","Math","floor","icons","rangeId","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport Weather from \"./components/weatherapp\";\nimport Form from \"./components/form\";\n\n// api.openweathermap.org/data/2.5/weather?q=London,uk\nconst API_KEY = \"db0722dc5ad7c43d8271bb13f965e3fb\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      temp_max: undefined,\n      temp_min: undefined,\n      description: \"\",\n      error: false\n    };\n    this.weathericon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-select\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      clouds: \"wi-day-fog\",\n    };\n  }\n\n  calCelsius(temp) {\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({ icon: this.weathericon.Thunderstorm });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({ icon: this.weathericon.Drizzle });\n        break;\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({ icon: this.weathericon.Rain });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({ icon: this.weathericon.Snow });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({ icon: this.weathericon.Atmosphere });\n        break;\n      case rangeId === 800:\n        this.setState({ icon: this.weathericon.Clear });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({ icon: this.weathericon.clouds });\n        break;\n      default:\n        this.setState({ icon: this.weathericon.clouds });\n    }\n  }\n  getWeatherData = async (e) => {\n    e.preventDefault();\n    const city = e.target.elements.city.value\n    const api_call = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=Bangalore,in&appid=${API_KEY}`\n    );\n    const response = await api_call.json();\n    this.setState({\n      city: response.name,\n      country: response.sys.country,\n      celsius: this.calCelsius(response.main.temp),\n      temp_max: this.calCelsius(response.main.temp_max),\n      temp_min: this.calCelsius(response.main.temp_min),\n      description: response.weather[0].description,\n    });\n    this.get_WeatherIcon(this.weathericon, response.weather[0].id);\n\n  };\n  componentDidMount() {\n    this.getWeatherData();\n  };\n  render() {\n    const {\n      city,\n      country,\n      icon,\n      main,\n      celsius,\n      temp_max,\n      temp_min,\n      description,\n      error,\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <Form loadweather={this.getWeatherData}/>\n        <Weather\n          city={city}\n          country={country}\n          main={main}\n          celsius={celsius}\n          temp_max={temp_max}\n          temp_min={temp_min}\n          description={description}\n          weathericon={icon}\n          error={error}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}